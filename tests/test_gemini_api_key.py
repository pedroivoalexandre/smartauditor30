# tests/test_gemini_api_key.py

# Este arquivo de teste √© crucial para verificar a integra√ß√£o do projeto com a API Gemini.
# Ele garante que a `GEMINI_API_KEY` configurada no arquivo `.env` √© v√°lida e funcional,
# realizando uma chamada real √† API. Isso serve como um teste de integra√ß√£o,
# confirmando que a comunica√ß√£o com o servi√ßo externo est√° operando conforme o esperado.

import os
import pytest
from pathlib import Path
import google.generativeai as genai
from smart_utils.env_loader import EnvLoader

class TestGeminiAPIKey:
    """
    Classe de teste para verificar a validade e funcionalidade da chave da API Gemini.
    Realiza uma chamada de teste √† API para confirmar a autentica√ß√£o e a resposta.
    """

    @pytest.fixture(autouse=True)
    def setup_method(self):
        """
        Fixture que √© executada automaticamente antes de cada m√©todo de teste nesta classe.
        Ela configura o caminho para o arquivo `.env` principal do projeto
        (localizado em `smart_utils/.env`) e inicializa uma inst√¢ncia de `EnvLoader`
        para carregar as vari√°veis de ambiente desse arquivo.
        """
        self.caminho_env = Path(__file__).resolve().parent.parent / 'smart_utils' / '.env'
        self.loader = EnvLoader(self.caminho_env)

    def test_gemini_api_key_validity(self):
        """
        Verifica a validade da `GEMINI_API_KEY` fazendo uma chamada funcional √† API Gemini via SDK.
        Este teste:
        1. Obt√©m a chave da API usando o `EnvLoader`.
        2. Ignora o teste se a chave for ausente, padr√£o ou suspeita (muito curta).
        3. Configura a chave da API para o SDK do Gemini.
        4. Tenta gerar conte√∫do usando o modelo `gemini-1.5-flash`.
        5. Afirma que a resposta da API n√£o est√° vazia.
        6. Em caso de erro na conex√£o ou na validade da chave, o teste falha.
        """
        api_key = self.loader.obter_chave("GEMINI_API_KEY")
        print(f"üîë Chave sendo usada: {api_key}")

        if not api_key or api_key == "sua_chave_aqui" or len(api_key.strip()) < 10:
            pytest.skip("GEMINI_API_KEY ausente, √© o valor padr√£o ou suspeita (curta demais).")

        try:
            genai.configure(api_key=api_key)
            modelo = genai.GenerativeModel("gemini-1.5-flash")
            resposta = modelo.generate_content("Ol√°! Voc√™ est√° funcionando?")
            assert resposta.text.strip() != "", "A resposta da API Gemini est√° vazia."
            print("‚úÖ Chave v√°lida e resposta recebida:", resposta.text.strip())
        except Exception as e:
            pytest.fail(f"‚ùå Erro ao conectar √† API Gemini: {e}")
